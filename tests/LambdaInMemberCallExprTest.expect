class Test
{
public:

    template<typename T>
    void foo(T&&){}
    
    /* First instantiated from: LambdaInMemberCallExprTest.cpp:13 */
    #ifdef INSIGHTS_USE_TEMPLATE
    template<>
    inline void foo<__lambda_13_12>(__lambda_13_12 &&)
    {
    }
    #endif
    
/* public: inline constexpr Test() noexcept; */
/* public: inline constexpr Test(const Test &); */
/* public: inline constexpr Test(Test &&); */
};

int main()
{
  Test t = Test();
    
  class __lambda_13_12
  {
    public: inline /*constexpr */ void operator()() const
    {
    }
    
  } __lambda_13_12{};
  
  t.foo(__lambda_13_12);
}

