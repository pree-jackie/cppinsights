class Test
{
public:
    inline Test()
    : mV{}
    {
    }
    
    

    inline Test(int v)
    : mV{v}
    {
    }
    
    

    inline Test(Test & v)
    : mV{v.mV}
    {
    }
    
    

  
    inline Test & operator=(const Test & other)
    {
      this->mV = other.mV;
      return *this;
    }
    

    inline Test & operator++()
    {
      this->mV++;
      return *this;
    }
    

    inline Test operator++(int)
    {
      Test tmp = Test(*this) /* NRVO variable */;
      this->operator++();
      return Test(tmp);
    }
        

    inline Test & operator+=(const Test & rhs)
    {
      this->mV += rhs.mV;
      return *this;
    }
    
 
  using retType = int;
  inline operator retType ()
  {
    return this->mV;
  }
  

private:
    int mV;
/* public: inline ~Test() noexcept; */
};


struct S
{
    Test count;
    
/* public: inline S(S &); */
/* public: inline S & operator=(S &&); */
/* public: inline S() noexcept; */
};

int main()
{
  S s = S();
  S s2 = S();
  s.count.operator++(0);
  Test t = Test();
  char * raw = reinterpret_cast<char *>(&s + 1);
  Test * p = reinterpret_cast<Test *>(&raw[static_cast<long>(static_cast<int>(s.count.operator int()))]);
  (*p).operator=((t));
  (*p).operator=(s2.count);
  s.count.operator+=(Test(static_cast<int>(sizeof(p))));
  s.count.operator+=(Test(static_cast<int>(alignof(p))));
  s.count.operator+=(Test(p ? 1 : 2));
}

