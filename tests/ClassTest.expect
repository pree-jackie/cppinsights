class Test
{
public:
    inline Test(int v)
    : mV{v}
    {
    }
    
    

    inline Test(Test & v)
    : mV{v.mV}
    {
    }
    
    

  
    inline Test & operator=(const Test & other)
    {
      this->mV = other.mV;
      return *this;
    }
    

#if 0  
    Test& operator=( Test&& other)
    {
        mV = other.mV;
        return *this;
    }
#endif
  
#if 0  
    Test& operator=(Test arg) noexcept // copy/move constructor is called to construct arg
    {
        mV = arg.mV;
        return *this;
    }
  #endif

    inline Test & operator++()
    {
      this->mV++;
      return *this;
    }
    

    inline Test operator++(int)
    {
      Test tmp = Test(*this) /* NRVO variable */;
      this->operator++();
      return Test(tmp);
    }
        

    inline Test & operator+=(const Test & rhs)
    {
      this->mV += rhs.mV;
      return *this;
    }
    
 
  using retType = int;
  inline operator retType ()
  {
    return this->mV;
  }
  

private:
    int mV;
/* public: inline ~Test() noexcept; */
};

int main()
{
  Test t = Test(2);
  t.operator=(Test(3 * 2));
  Test tt = Test(4);
  t.operator+=(Test(static_cast<int>(tt.operator int()) * 2));
}


