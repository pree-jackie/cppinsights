//: C08:ConstReturnValues.cpp
// Constant return by value
// Result cannot be used as an lvalue
class X
{
    int i;

public:
    X(int ii);
    
    
    void modify();
    
/* public: inline constexpr X(const X &); */
/* public: inline constexpr X(X &&); */
/* public: inline ~X() noexcept; */
/* public: inline X & operator=(const X &); */
/* public: inline X & operator=(X &&) noexcept; */
};

X::X(int ii)
{
  this->i = ii;
}



void X::modify()
{
  this->i++;
}


X f5()
{
  return X(0);
}


const X f6()
{
  return X(0);
}


void f7(X & x)
{
  x.modify();
}



X f8(bool x, int y)
{
  if(x || y == 2) {
    return X(y);
  }
  
  return X(0);
}


int main()
{
  f5().operator=(X(1));
  f5().modify();
  f8(false, 5).operator=(X(2));
}
  ///:~


#include <iostream>

class Base
{
public:
    inline ~Base() noexcept
    {
      std::operator<<(std::cout, "Base dtor").operator<<(std::endl);
    }
    
/* public: inline constexpr Base(const Base &); */
};

class Foo : public Base
{
public:
    // Note: No virtual dtors 
    inline ~Foo() noexcept
    {
      std::operator<<(std::cout, "Foo dtor").operator<<(std::endl);
    }
    
/* public: inline constexpr Foo(const Foo &); */
};

Base return_base()
{
  return {};
}

Foo return_foo()
{
  return {{}};
}


int main2()
{
  const Base & b = {static_cast<const Base&>(return_foo())};
  return 2;
}


struct S {
  inline S()
  {
  }
  
    // User defined constructor makes S non-POD.
  inline ~S() noexcept
  {
  }
   // User defined destructor makes it non-trivial.
/* public: inline constexpr S(const S &); */
};
void test()
{
  const S & s_ref = S();
}


