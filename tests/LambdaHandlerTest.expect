#include <cstdio>

class Bar
{
    inline Bar()
    : a{1}
    {
            
      class __lambda_8_18
      {
        public: inline /*constexpr */ void operator()() const
        {
          printf("%d\n", __this->a);
        }
        
        private:
        Bar * __this;
        
        public: __lambda_8_18(Bar * ___this)
        : __this{___this}
        {}
        
      };
      
      __lambda_8_18 x = __lambda_8_18{this};
    }
    
    

    int a;

};

int main()
{
  int foo = 2;
  int b = 4;
    
  class __lambda_20_19
  {
    public: inline /*constexpr */ void operator()() const
    {
      printf("%d\n", foo);
    }
    
    private:
    int& foo;
    
    public: __lambda_20_19(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_20_19 lambda = __lambda_20_19{foo};
  lambda.operator()();
    
  class __lambda_24_20
  {
    public: inline /*constexpr */ void operator()() const
    {
      printf("%d\n", 1);
    }
    
  };
  
  __lambda_24_20 lambda2 = __lambda_24_20{};
  lambda2.operator()();
    
  class __lambda_28_20
  {
    public: inline /*constexpr */ int operator()()
    {
      printf("%d\n", ++foo);
      return foo;
    }
    
    private:
    int& foo;
    
    public: __lambda_28_20(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_28_20 lambda3 = __lambda_28_20{foo};
  lambda3.operator()();
    
  class __lambda_32_20
  {
    public: inline /*constexpr */ int operator()(int x) const
    {
      printf("%d\n", foo + x);
      return foo + x;
    }
    
    private:
    int& foo;
    
    public: __lambda_32_20(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_32_20 lambda4 = __lambda_32_20{foo};
    
  class __lambda_34_20
  {
    public: inline /*constexpr */ int operator()(const int x) const
    {
      printf("%d\n", foo + x);
      return foo + x;
    }
    
    private:
    int& foo;
    
    public: __lambda_34_20(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_34_20 lambda5 = __lambda_34_20{foo};
    
  class __lambda_36_20
  {
    public: inline /*constexpr */ int operator()(int & x, int b) const
    {
      printf("%d\n", foo + x);
      return foo + x + b;
    }
    
    private:
    int& foo;
    
    public: __lambda_36_20(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_36_20 lambda6 = __lambda_36_20{foo};
    
  class __lambda_38_20
  {
    public: inline /*constexpr */ int operator()(int & x, int b) const
    {
      printf("%d\n", foo + x);
      return foo + x + b;
    }
    
    private:
    int& foo;
    
    public: __lambda_38_20(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_38_20 lambda7 = __lambda_38_20{foo};
  lambda7.operator()(foo, 2);
    
  class __lambda_41_21
  {
    
    private:
    int& foo;
    
    public: __lambda_41_21(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_41_21 lambda71 = __lambda_41_21{foo};
    
  class __lambda_43_21
  {
    public: inline /*constexpr */ int operator()(int & x, const int & b, const int c) const
    {
      printf("%d\n", foo + x);
      return foo + x + b + c;
    }
    
    private:
    int& foo;
    
    public: __lambda_43_21(int& _foo)
    : foo{_foo}
    {}
    
  };
  
  __lambda_43_21 lambda73 = __lambda_43_21{foo};
  lambda73.operator()(foo, b, 44);
    
  class __lambda_46_20
  {
    public: inline /*constexpr */ int operator()(int & x, int b) const
    {
      printf("%d\n", foo + x);
      return foo + x + b;
    }
    
    private:
    int foo;
    int b;
    
    public: __lambda_46_20(int _foo, int _b)
    : foo{_foo}
, b{_b}
    {}
    
  };
  
  __lambda_46_20 lambda8 = __lambda_46_20{foo, b};
    
  class __lambda_48_20
  {
    public: inline /*constexpr */ int operator()(int & x, int b) const noexcept
    {
      printf("%d\n", foo + x);
      return foo + x + b;
    }
    
    private:
    int foo;
    int b;
    
    public: __lambda_48_20(int _foo, int _b)
    : foo{_foo}
, b{_b}
    {}
    
  };
  
  __lambda_48_20 lambda9 = __lambda_48_20{foo, b};
}

